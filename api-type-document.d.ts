/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   api-type-document.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {LitElement, html, css} from 'lit-element';

import {PropertyDocumentMixin} from './property-document-mixin.js';

declare namespace ApiElements {

  /**
   * `api-type-document`
   *
   * An element that recuresively renders a documentation for a data type
   * using from model.
   *
   * Pass AMF's shape type `property` array to render the documentation.
   */
  class ApiTypeDocument extends
    PropertyDocumentMixin(
    AmfHelperMixin(
    Object)) {

    /**
     * A type definition to render.
     * This should be a one of the following AMF types:
     *
     * - `http://www.w3.org/ns/shacl#NodeShape` (Object)
     * - `http://raml.org/vocabularies/shapes#UnionShape` (Union)
     * - `http://raml.org/vocabularies/shapes#ArrayShape` (Array)
     * - `http://raml.org/vocabularies/shapes#ScalarShape` (single property)
     *
     * It also accepts array of properties like list of headers or
     * parameters.
     */
    type: object|any[]|null;

    /**
     * A list of supported media types for the type.
     * This is used by `api-resource-example-document` to compute examples.
     * In practive it should be value of raml's `mediaType`.
     *
     * Each item in the array is just a name of thr media type.
     *
     * Example:
     *
     * ```json
     * ["application/json", "application/xml"]
     * ```
     */
    mediaTypes: Array<String|null>|null;

    /**
     * Should be set if described properties has a parent type.
     * This is used when recursively iterating over properties.
     */
    parentTypeName: string|null|undefined;

    /**
     * Computed list of union type types to render in union type
     * selector.
     * Each item has `label` and `isScalar` property.
     */
    unionTypes: Array<object|null>|null;

    /**
     * When set an example in this `type` object won't be rendered even if set.
     */
    noMainExample: boolean|null|undefined;
    _hasExamples: boolean|null|undefined;

    /**
     * `raml-aware` scope property to use.
     */
    aware: string|null|undefined;

    /**
     * Media type to use to render examples.
     * If not set a "raw" version of the example from API spec file is used.
     */
    mediaType: string|null|undefined;

    /**
     * Currently selected media type.
     * It is an index of a media type in `mediaTypes` array.
     * It is set to `0` each time the body changes.
     */
    selectedMediaType: number|null|undefined;

    /**
     * The type after it has been resolved.
     */
    _resolvedType: object|null|undefined;

    /**
     * Computed value, true if the shape has parent type.
     */
    hasParentType: boolean|null|undefined;

    /**
     * True if given `type` is a scalar property
     */
    isScalar: boolean|null|undefined;

    /**
     * True if given `type` is an array property
     */
    isArray: boolean|null|undefined;

    /**
     * True if given `type` is an object property
     */
    isObject: boolean|null|undefined;

    /**
     * True if given `type` is an union property
     */
    isUnion: boolean|null|undefined;

    /**
     * True if given `type` is OAS "and" type.
     */
    isAnd: boolean|null|undefined;

    /**
     * List of types definition and name for OAS' "and" type
     */
    andTypes: any[]|null|undefined;

    /**
     * Selected index of union type in `unionTypes` array.
     */
    selectedUnion: number|null|undefined;

    /**
     * A property to set when the component is rendered in the narrow
     * view. To be used with mobile rendering or when the
     * components occupies only small part of the screen.
     */
    narrow: boolean|null|undefined;

    /**
     * When rendering schema for a payload set this to the payload ID
     * so the examples can be correctly rendered.
     */
    selectedBodyId: string|null|undefined;
    _renderMainExample: boolean|null|undefined;
    _computeRenderMainExample(noMainExample: any, hasExamples: any): any;

    /**
     * Handles type change. Sets basic view control properties.
     *
     * @param type Passed type/
     */
    _typeChanged(type: any[]|object|null): void;

    /**
     * Computes parent name for the array type table.
     *
     * @param parent `parentTypeName` if available
     * @returns Parent type name of refault value for array type.
     */
    _computeArrayParentName(parent: String|null): String|null;

    /**
     * Resets union selection when union types list changes.
     *
     * @param types List of current union types.
     */
    _unionTypesChanged(types: any[]|null): void;

    /**
     * Handler for union type button click.
     * Sets `selectedUnion` property.
     */
    _selectUnion(e: ClickEvent|null): void;

    /**
     * Computes properties for union type.
     *
     * @param type Current `type` value.
     * @param selected Selected union index from `unionTypes` array
     * @returns Properties for union type.
     */
    _computeUnionProperty(type: object|null, selected: Number|null): Array<object|null>|null|undefined;

    /**
     * Helper function for the view. Extracts `http://www.w3.org/ns/shacl#property`
     * from the shape model
     *
     * @param item Range object
     * @returns Shape object
     */
    _computeProperties(item: object|null): Array<object|null>|null;

    /**
     * Computes list values for `andTypes` property.
     *
     * @param items List of OAS' "and" properties
     * @returns An array of type definitions and label to render
     */
    _computeAndTypes(items: Array<object|null>|null): Array<object|null>|null;

    /**
     * Observer for `mediaTypes` property.
     * Controls media type selected depending on the value.
     *
     * @param types List of media types that are supported by the API.
     */
    _mediaTypesChanged(types: Array<String|null>|null): void;

    /**
     * Computes if `selected` equals current item index.
     */
    _mediaTypeActive(selected: Number|null, index: Number|null): Boolean|null;

    /**
     * Handler for media type type button click.
     * Sets `selected` property.
     */
    _selectMediaType(e: ClickEvent|null): void;
    _apiChangedHandler(e: any): void;
    _hasExamplesHandler(e: any): void;
    _objectTemplate(): any;
    _arrayTemplate(): any;
    _unionTemplate(): any;
    _anyTemplate(): any;
    render(): any;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "api-type-document": ApiElements.ApiTypeDocument;
  }
}
